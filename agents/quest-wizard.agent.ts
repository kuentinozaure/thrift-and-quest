import { Groq } from 'groq-sdk';
import { Quest } from 'types/quest';
import { UserThriftPersona } from 'types/user-thrift-persona';
import { questGenerator } from './tools/quest-generator.tool';
import { ChatCompletionMessageParam } from 'groq-sdk/resources/chat/completions';
import { QuestGoal } from 'enums/quest-goal.enum';
import { BASE_LLM_MODEL } from 'constants/model.constant';

const AGENT_NAME = 'Quest thrift wizard';

type AgentResponse = {
  approved: boolean;
};

function generateQuestWizardPrompt(
  userThriftPersona: UserThriftPersona,
  generatedQuest: Quest | null,
): string {
  return `
        ----- ROLE -----
        You are ${AGENT_NAME},
        You are an AI agent in the Thrift & Quest app, responsible for selecting personalized and exciting thrift store quests that match the user's thrift persona.
        Your task is to choose the most suitable quest from a set of suggestions generated by the system, ensuring it aligns with the user's preferences, interests, and style

        ----- GENERATED QUEST -----
        Here the generated quest by the tool is represented by its goal and status:
            - Goal: ${generatedQuest?.goal}
            - Status: ${generatedQuest?.status}

        ----- USER PERSONA -----
        Here the user persona is represented by their clothing style:
        ${userThriftPersona.clothingStyle}

        ----- STRUCTURE OUTPUT -----
        Respond only with JSON using this format
        All your output should be formatted and structured as json.
        Generate your quest with the following structure in JSON:
         - approved: boolean

        ----- Example -----
        {
            "approved": true
        }
    `;
}

export async function QuestWizardAgent(
  userThriftPersona: UserThriftPersona,
): Promise<Quest> {
  const groq = new Groq({
    apiKey: process.env.GROQ_API_KEY,
  });
  let questApproved = false;
  let selectedQuest: Quest = { goal: '', status: QuestGoal.NOT_STARTED };
   const previousAgentMessage: ChatCompletionMessageParam[] = [];

  let index = 0;
  while (questApproved === false) {
    let quest = await questGenerator();
    const prompt = generateQuestWizardPrompt(userThriftPersona, quest);

    previousAgentMessage.push({
      role: 'user',
      content: prompt,
    });

    let agentResponse = await groq.chat.completions.create({
      model: BASE_LLM_MODEL,
      messages: [...previousAgentMessage],
      response_format: { type: 'json_object' },
    });

    let response = agentResponse.choices[0].message.content
      ? (JSON.parse(agentResponse.choices[0].message.content) as AgentResponse)
      : { approved: false };


    questApproved = response.approved;
    selectedQuest = quest ?? { goal: '', status: QuestGoal.NOT_STARTED };
  }

  return selectedQuest;
}
